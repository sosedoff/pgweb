// Code generated by go-bindata.
// sources:
// static/css/app.css
// static/css/bootstrap.css
// static/css/font-awesome.css
// static/fonts/FontAwesome.otf
// static/fonts/fontawesome-webfont.eot
// static/fonts/fontawesome-webfont.svg
// static/fonts/fontawesome-webfont.ttf
// static/fonts/fontawesome-webfont.woff
// static/img/icon.ico
// static/img/icon.png
// static/index.html
// static/js/ace-pgsql.js
// static/js/ace.js
// static/js/app.js
// static/js/bootstrap-contextmenu.js
// static/js/bootstrap3-typeahead.min.js
// static/js/jquery.js
// static/js/theme-tomorrow.js
// static/js/utils.js
// DO NOT EDIT!

package data

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// staticCssAppCss reads file data from disk. It returns an error on failure.
func staticCssAppCss() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/css/app.css"
	name := "static/css/app.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapCss() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/css/bootstrap.css"
	name := "static/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontAwesomeCss reads file data from disk. It returns an error on failure.
func staticCssFontAwesomeCss() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/css/font-awesome.css"
	name := "static/css/font-awesome.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeOtf reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeOtf() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/fonts/FontAwesome.otf"
	name := "static/fonts/FontAwesome.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeWebfontEot reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeWebfontEot() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/fonts/fontawesome-webfont.eot"
	name := "static/fonts/fontawesome-webfont.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeWebfontSvg reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeWebfontSvg() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/fonts/fontawesome-webfont.svg"
	name := "static/fonts/fontawesome-webfont.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeWebfontTtf reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeWebfontTtf() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/fonts/fontawesome-webfont.ttf"
	name := "static/fonts/fontawesome-webfont.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFontsFontawesomeWebfontWoff reads file data from disk. It returns an error on failure.
func staticFontsFontawesomeWebfontWoff() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/fonts/fontawesome-webfont.woff"
	name := "static/fonts/fontawesome-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgIconIco reads file data from disk. It returns an error on failure.
func staticImgIconIco() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/img/icon.ico"
	name := "static/img/icon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgIconPng reads file data from disk. It returns an error on failure.
func staticImgIconPng() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/img/icon.png"
	name := "static/img/icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticIndexHtml reads file data from disk. It returns an error on failure.
func staticIndexHtml() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/index.html"
	name := "static/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAcePgsqlJs reads file data from disk. It returns an error on failure.
func staticJsAcePgsqlJs() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/js/ace-pgsql.js"
	name := "static/js/ace-pgsql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAceJs reads file data from disk. It returns an error on failure.
func staticJsAceJs() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/js/ace.js"
	name := "static/js/ace.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAppJs reads file data from disk. It returns an error on failure.
func staticJsAppJs() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/js/app.js"
	name := "static/js/app.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapContextmenuJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapContextmenuJs() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/js/bootstrap-contextmenu.js"
	name := "static/js/bootstrap-contextmenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrap3TypeaheadMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrap3TypeaheadMinJs() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/js/bootstrap3-typeahead.min.js"
	name := "static/js/bootstrap3-typeahead.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryJs reads file data from disk. It returns an error on failure.
func staticJsJqueryJs() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/js/jquery.js"
	name := "static/js/jquery.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsThemeTomorrowJs reads file data from disk. It returns an error on failure.
func staticJsThemeTomorrowJs() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/js/theme-tomorrow.js"
	name := "static/js/theme-tomorrow.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsUtilsJs reads file data from disk. It returns an error on failure.
func staticJsUtilsJs() (*asset, error) {
	path := "/Users/sosedoff/go/src/github.com/sosedoff/pgweb/static/js/utils.js"
	name := "static/js/utils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/app.css": staticCssAppCss,
	"static/css/bootstrap.css": staticCssBootstrapCss,
	"static/css/font-awesome.css": staticCssFontAwesomeCss,
	"static/fonts/FontAwesome.otf": staticFontsFontawesomeOtf,
	"static/fonts/fontawesome-webfont.eot": staticFontsFontawesomeWebfontEot,
	"static/fonts/fontawesome-webfont.svg": staticFontsFontawesomeWebfontSvg,
	"static/fonts/fontawesome-webfont.ttf": staticFontsFontawesomeWebfontTtf,
	"static/fonts/fontawesome-webfont.woff": staticFontsFontawesomeWebfontWoff,
	"static/img/icon.ico": staticImgIconIco,
	"static/img/icon.png": staticImgIconPng,
	"static/index.html": staticIndexHtml,
	"static/js/ace-pgsql.js": staticJsAcePgsqlJs,
	"static/js/ace.js": staticJsAceJs,
	"static/js/app.js": staticJsAppJs,
	"static/js/bootstrap-contextmenu.js": staticJsBootstrapContextmenuJs,
	"static/js/bootstrap3-typeahead.min.js": staticJsBootstrap3TypeaheadMinJs,
	"static/js/jquery.js": staticJsJqueryJs,
	"static/js/theme-tomorrow.js": staticJsThemeTomorrowJs,
	"static/js/utils.js": staticJsUtilsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"app.css": &bintree{staticCssAppCss, map[string]*bintree{}},
			"bootstrap.css": &bintree{staticCssBootstrapCss, map[string]*bintree{}},
			"font-awesome.css": &bintree{staticCssFontAwesomeCss, map[string]*bintree{}},
		}},
		"fonts": &bintree{nil, map[string]*bintree{
			"FontAwesome.otf": &bintree{staticFontsFontawesomeOtf, map[string]*bintree{}},
			"fontawesome-webfont.eot": &bintree{staticFontsFontawesomeWebfontEot, map[string]*bintree{}},
			"fontawesome-webfont.svg": &bintree{staticFontsFontawesomeWebfontSvg, map[string]*bintree{}},
			"fontawesome-webfont.ttf": &bintree{staticFontsFontawesomeWebfontTtf, map[string]*bintree{}},
			"fontawesome-webfont.woff": &bintree{staticFontsFontawesomeWebfontWoff, map[string]*bintree{}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			"icon.ico": &bintree{staticImgIconIco, map[string]*bintree{}},
			"icon.png": &bintree{staticImgIconPng, map[string]*bintree{}},
		}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"ace-pgsql.js": &bintree{staticJsAcePgsqlJs, map[string]*bintree{}},
			"ace.js": &bintree{staticJsAceJs, map[string]*bintree{}},
			"app.js": &bintree{staticJsAppJs, map[string]*bintree{}},
			"bootstrap-contextmenu.js": &bintree{staticJsBootstrapContextmenuJs, map[string]*bintree{}},
			"bootstrap3-typeahead.min.js": &bintree{staticJsBootstrap3TypeaheadMinJs, map[string]*bintree{}},
			"jquery.js": &bintree{staticJsJqueryJs, map[string]*bintree{}},
			"theme-tomorrow.js": &bintree{staticJsThemeTomorrowJs, map[string]*bintree{}},
			"utils.js": &bintree{staticJsUtilsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

