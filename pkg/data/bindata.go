// Code generated by go-bindata.
// sources:
// static/css/app.css
// static/css/bootstrap.css
// static/css/font-awesome.css
// static/fonts/FontAwesome.otf
// static/fonts/fontawesome-webfont.eot
// static/fonts/fontawesome-webfont.svg
// static/fonts/fontawesome-webfont.ttf
// static/fonts/fontawesome-webfont.woff
// static/img/icon.ico
// static/img/icon.png
// static/index.html
// static/js/ace-pgsql.js
// static/js/ace.js
// static/js/app.js
// static/js/bootstrap-contextmenu.js
// static/js/jquery.js
// static/js/theme-tomorrow.js
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
	//"bufio"
)

func bindataRead(data []byte, name string) ([]byte, error) {

	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssAppCss = []byte("")

func staticCssAppCssBytes() ([]byte, error) {
	return LoadFileContent("static/css/app.css")
	//return bindataRead(
	//	_staticCssAppCss,
	//	"static/css/app.css",
	//)
}

func staticCssAppCss() (*asset, error) {
	bytes, err := staticCssAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/app.css", size: 10231, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssBootstrapCss = []byte("")

func staticCssBootstrapCssBytes() ([]byte, error) {
	return LoadFileContent("static/css/bootstrap.css")
	//return bindataRead(
	//	_staticCssBootstrapCss,
	//	"static/css/bootstrap.css",
	//)
}

func staticCssBootstrapCss() (*asset, error) {
	bytes, err := staticCssBootstrapCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/bootstrap.css", size: 109518, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssFontAwesomeCss = []byte("")

func staticCssFontAwesomeCssBytes() ([]byte, error) {
	return LoadFileContent("static/css/font-awesome.css")
	//return bindataRead(
	//	_staticCssFontAwesomeCss,
	//	"static/css/font-awesome.css",
	//)
}

func staticCssFontAwesomeCss() (*asset, error) {
	bytes, err := staticCssFontAwesomeCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/font-awesome.css", size: 21984, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFontsFontawesomeOtf = []byte("")

func staticFontsFontawesomeOtfBytes() ([]byte, error) {
	return LoadFileContent("static/fonts/FontAwesome.otf")
	//return bindataRead(
	//	_staticFontsFontawesomeOtf,
	//	"static/fonts/FontAwesome.otf",
	//)
}

func staticFontsFontawesomeOtf() (*asset, error) {
	bytes, err := staticFontsFontawesomeOtfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/fonts/FontAwesome.otf", size: 85908, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFontsFontawesomeWebfontEot = []byte("")

func staticFontsFontawesomeWebfontEotBytes() ([]byte, error) {
	return LoadFileContent("static/fonts/fontawesome-webfont.eot")
	//return bindataRead(
	//	_staticFontsFontawesomeWebfontEot,
	//	"static/fonts/fontawesome-webfont.eot",
	//)
}

func staticFontsFontawesomeWebfontEot() (*asset, error) {
	bytes, err := staticFontsFontawesomeWebfontEotBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/fonts/fontawesome-webfont.eot", size: 56006, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFontsFontawesomeWebfontSvg = []byte("")

func staticFontsFontawesomeWebfontSvgBytes() ([]byte, error) {
	return LoadFileContent("static/fonts/fontawesome-webfont.svg")
	//return bindataRead(
	//	_staticFontsFontawesomeWebfontSvg,
	//	"static/fonts/fontawesome-webfont.svg",
	//)
}

func staticFontsFontawesomeWebfontSvg() (*asset, error) {
	bytes, err := staticFontsFontawesomeWebfontSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/fonts/fontawesome-webfont.svg", size: 287007, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFontsFontawesomeWebfontTtf = []byte("")

func staticFontsFontawesomeWebfontTtfBytes() ([]byte, error) {
	return LoadFileContent("static/fonts/fontawesome-webfont.ttf")
	//return bindataRead(
	//	_staticFontsFontawesomeWebfontTtf,
	//	"static/fonts/fontawesome-webfont.ttf",
	//)
}

func staticFontsFontawesomeWebfontTtf() (*asset, error) {
	bytes, err := staticFontsFontawesomeWebfontTtfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/fonts/fontawesome-webfont.ttf", size: 112160, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFontsFontawesomeWebfontWoff = []byte("")

func staticFontsFontawesomeWebfontWoffBytes() ([]byte, error) {
	return LoadFileContent("static/fonts/fontawesome-webfont.woff")
	//return bindataRead(
	//	_staticFontsFontawesomeWebfontWoff,
	//	"static/fonts/fontawesome-webfont.woff",
	//)
}

func staticFontsFontawesomeWebfontWoff() (*asset, error) {
	bytes, err := staticFontsFontawesomeWebfontWoffBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/fonts/fontawesome-webfont.woff", size: 65452, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticImgIconIco = []byte("")

func staticImgIconIcoBytes() ([]byte, error) {
	return LoadFileContent("static/img/icon.ico")
	//return bindataRead(
	//	_staticImgIconIco,
	//	"static/img/icon.ico",
	//)
}

func staticImgIconIco() (*asset, error) {
	bytes, err := staticImgIconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/img/icon.ico", size: 104736, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticImgIconPng = []byte("")

func staticImgIconPngBytes() ([]byte, error) {
	return LoadFileContent("static/img/icon.png")
	//return bindataRead(
	//	_staticImgIconPng,
	//	"static/img/icon.png",
	//)
}

func staticImgIconPng() (*asset, error) {
	bytes, err := staticImgIconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/img/icon.png", size: 7945, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("")

func staticIndexHtmlBytes() ([]byte, error) {
	return LoadFileContent("static/index.html")
	//data,err := ioutil.ReadFile("static/index.html")
	//return []byte(data),err
	//return bindataRead(
	//	_staticIndexHtml,
	//	"static/index.html",
	//)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	//var bytes []byte
	//
	//data, err := ioutil.ReadFile("static/index.html")
	//bytes = []byte(data)
	//fmt.Println(string(bytes))
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 10187, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJsAcePgsqlJs = []byte("")

func staticJsAcePgsqlJsBytes() ([]byte, error) {
	return LoadFileContent("static/js/ace-pgsql.js")
	//return bindataRead(
	//	_staticJsAcePgsqlJs,
	//	"static/js/ace-pgsql.js",
	//)
}

func staticJsAcePgsqlJs() (*asset, error) {
	bytes, err := staticJsAcePgsqlJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js/ace-pgsql.js", size: 53342, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJsAceJs = []byte("")

func staticJsAceJsBytes() ([]byte, error) {
	return LoadFileContent("static/js/ace.js")
	//return bindataRead(
	//	_staticJsAceJs,
	//	"static/js/ace.js",
	//)
}

func staticJsAceJs() (*asset, error) {
	bytes, err := staticJsAceJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js/ace.js", size: 327872, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJsAppJs = []byte("")

func staticJsAppJsBytes() ([]byte, error) {
	return LoadFileContent("static/js/app.js")
	//return bindataRead(
	//	_staticJsAppJs,
	//	"static/js/app.js",
	//)
}

func staticJsAppJs() (*asset, error) {
	bytes, err := staticJsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js/app.js", size: 26623, mode: os.FileMode(420), modTime: time.Unix(1469805699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJsBootstrapContextmenuJs = []byte("")

func staticJsBootstrapContextmenuJsBytes() ([]byte, error) {
	return LoadFileContent("static/js/bootstrap-contextmenu.js")
	//return bindataRead(
	//	_staticJsBootstrapContextmenuJs,
	//	"static/js/bootstrap-contextmenu.js",
	//)
}

func staticJsBootstrapContextmenuJs() (*asset, error) {
	bytes, err := staticJsBootstrapContextmenuJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js/bootstrap-contextmenu.js", size: 5300, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJsJqueryJs = []byte("")

func staticJsJqueryJsBytes() ([]byte, error) {
	return LoadFileContent("static/js/jquery.js")
	//return bindataRead(
	//	_staticJsJqueryJs,
	//	"static/js/jquery.js",
	//)
}

func staticJsJqueryJs() (*asset, error) {
	bytes, err := staticJsJqueryJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js/jquery.js", size: 84245, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJsThemeTomorrowJs = []byte("")

func staticJsThemeTomorrowJsBytes() ([]byte, error) {
	return LoadFileContent("static/js/theme-tomorrow.js")
	//return bindataRead(
	//	_staticJsThemeTomorrowJs,
	//	"static/js/theme-tomorrow.js",
	//)
}

func staticJsThemeTomorrowJs() (*asset, error) {
	bytes, err := staticJsThemeTomorrowJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js/theme-tomorrow.js", size: 2556, mode: os.FileMode(420), modTime: time.Unix(1467073917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		fmt.Println(cannonicalName,f)
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//载入文件内容
func LoadFileContent(filename string)([]byte,error){
	data,err := ioutil.ReadFile(filename)
	//fmt.Println(string(data))
	return []byte(data),err
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/app.css": staticCssAppCss,
	"static/css/bootstrap.css": staticCssBootstrapCss,
	"static/css/font-awesome.css": staticCssFontAwesomeCss,
	"static/fonts/FontAwesome.otf": staticFontsFontawesomeOtf,
	"static/fonts/fontawesome-webfont.eot": staticFontsFontawesomeWebfontEot,
	"static/fonts/fontawesome-webfont.svg": staticFontsFontawesomeWebfontSvg,
	"static/fonts/fontawesome-webfont.ttf": staticFontsFontawesomeWebfontTtf,
	"static/fonts/fontawesome-webfont.woff": staticFontsFontawesomeWebfontWoff,
	"static/img/icon.ico": staticImgIconIco,
	"static/img/icon.png": staticImgIconPng,
	"static/index.html": staticIndexHtml,
	"static/js/ace-pgsql.js": staticJsAcePgsqlJs,
	"static/js/ace.js": staticJsAceJs,
	"static/js/app.js": staticJsAppJs,
	"static/js/bootstrap-contextmenu.js": staticJsBootstrapContextmenuJs,
	"static/js/jquery.js": staticJsJqueryJs,
	"static/js/theme-tomorrow.js": staticJsThemeTomorrowJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"app.css": &bintree{staticCssAppCss, map[string]*bintree{}},
			"bootstrap.css": &bintree{staticCssBootstrapCss, map[string]*bintree{}},
			"font-awesome.css": &bintree{staticCssFontAwesomeCss, map[string]*bintree{}},
		}},
		"fonts": &bintree{nil, map[string]*bintree{
			"FontAwesome.otf": &bintree{staticFontsFontawesomeOtf, map[string]*bintree{}},
			"fontawesome-webfont.eot": &bintree{staticFontsFontawesomeWebfontEot, map[string]*bintree{}},
			"fontawesome-webfont.svg": &bintree{staticFontsFontawesomeWebfontSvg, map[string]*bintree{}},
			"fontawesome-webfont.ttf": &bintree{staticFontsFontawesomeWebfontTtf, map[string]*bintree{}},
			"fontawesome-webfont.woff": &bintree{staticFontsFontawesomeWebfontWoff, map[string]*bintree{}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			"icon.ico": &bintree{staticImgIconIco, map[string]*bintree{}},
			"icon.png": &bintree{staticImgIconPng, map[string]*bintree{}},
		}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"ace-pgsql.js": &bintree{staticJsAcePgsqlJs, map[string]*bintree{}},
			"ace.js": &bintree{staticJsAceJs, map[string]*bintree{}},
			"app.js": &bintree{staticJsAppJs, map[string]*bintree{}},
			"bootstrap-contextmenu.js": &bintree{staticJsBootstrapContextmenuJs, map[string]*bintree{}},
			"jquery.js": &bintree{staticJsJqueryJs, map[string]*bintree{}},
			"theme-tomorrow.js": &bintree{staticJsThemeTomorrowJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

